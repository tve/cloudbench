#!/usr/bin/env ruby

#require 'right_api_client'
require File.expand_path('../../right_api_client/lib/right_api_client', __FILE__)
require 'json'
require 'ripl'

$irb = false
if ARGV[0] == '-i' then $irb = true; ARGV.shift; end
$deployment_name = ARGV[0]
$server_name     = ARGV[1]
$account_id = 71.to_s

#puts "deployment=#{$deployment_name} server=#{$server_name}"

#
# Open right_api_connection and deal with authentication
#

# Read config file
$system = File.readable?('.rsrc') ? JSON.restore(File.open('.rsrc','r')) : {}
#puts ".rsrc: #{$system.inspect}"
$system['host'] ||= 'my.rightscale.com'
$system['email'] ||= 'someone@rightscale.com'

# Init right_api_client
loop do
  if $system.key?('cookies') && $system.key?('host')
    begin
      $client = RightApi::Client.new(:cookies => $system['cookies'],
                                     :api_url => "https://#{$system['host']}",
                                     :account_id => $account_id)
      break
    rescue Exception => e
      $stderr.puts "Can't log in to #{$system['host']} account 71 using existing cookies", e.inspect
      $stderr.puts "*** Please log in:"
    end
  elsif $system.key?('email') && $system.key?('pw') && $system.key?('host')
    begin
      $client = RightApi::Client.new(:email => $system['email'], :password => $system['pw'],
                                     :api_url => "https://#{$system['host']}",
                                     :account_id => $account_id)
      break
    rescue Exception => e
      $stderr.puts "Can't log in to #{$system['host']} account 71 as #{$system['email']}:", e.inspect
      $stderr.puts "*** Please log in:"
    end
  end
  $system.delete 'cookies'
  $stderr.printf "system [#{$system['host']}]: "
  host = STDIN.readline
  $system['host'] = host.chomp if host.size > 1
  $stderr.printf "email  [#{$system['email']}]: "
  email = STDIN.readline
  $system['email'] = email.chomp if email.size > 1
  system "stty -echo"
  $stderr.printf "pw     [#{"*"*($system['pw']||"").size}]: "
  pw = STDIN.readline
  system "stty echo"
  $system['pw'] = pw.chomp if pw.size > 1
  $stderr.puts "*"*($system['pw']||"").size
end
$system.delete('pw')
$system['cookies'] = $client.cookies
File.open(".rsrc", "w") do |f| JSON.dump($system, f) end

# API 1.0 client

$api10 = RestClient::Resource.new("https://#{$system['host']}", :timeout => -1)
$h10 = {'X_API_VERSION' => '1.0', :cookies => $client.cookies }

#
# Helper functions
#

def clone(server)
  server_id  = server.href.split('/').last
  puts "Cloning server #{server_id}"
  new_id = nil
  begin
    $client.do_put("/acct/#{$account_id}/servers/#{server_id}/duplicate")
  rescue RightApi::Exceptions::ApiException => e
    #puts "Exception: #{e.to_s}"
    if e.to_s =~ /servers\/(\d+)".redirected/
      new_id = $1
    else
      raise
    end
  end
  $client.servers(:id => new_id).show
end

def launch(server)
  puts "Launching #{server.next_instance.show.cloud.show.cloud_type} server"
  #puts server.show(:foo=>'foo').inspect
  server.launch
  sleep 1
  while (server=server.show(:foo=>'foo')).state == 'inactive'
    puts "    Waiting for server #{server.name} to get going..."
    sleep 10
  end
  puts "    Server is launching => #{server.name} #{server.href}"
end

def wait_launched(server)
  puts "Waiting for server #{server.name} to be running"
  loop do
    instance=server.show(:foo=>'foo').current_instance.show
    break if instance.state == 'operational'
    sleep 20
  end
end

def wait_done(server)
  puts "Waiting for server #{server.name} to be done"
  loop do
    instance=server.show(:foo=>'foo').current_instance.show
    tags = $client.tags.by_resource(:resource_hrefs => [instance.href])
    if !tags.nil? && tags.size >= 0
      tags = tags.first.tags
      break if tags.index{|t|t.values.index{|v| v.start_with?("mcbench:done=")}}
    end
    puts "    Still waiting for server #{server.name} to be done..."
    sleep 120
  end
end

$script_list = nil
def find_script(name)
  puts "Loading rightscript list" unless $script_list
  $script_list ||= JSON.restore $api10["/api/acct/#{$account_id}/right_scripts.js"].get($h10).tr(0.chr,' ')
  $script_list.select{|s| s['name'] == name && s['is_head_version']}.first
end

def run_bench(server, name)
  instance = server.show.current_instance.show
  script_href = find_script('TvE bench ' + name)['href'].sub(/.*right/, '/api/right')
  puts "Running script #{script_href}"
  ae = instance.run_executable(:right_script_href => script_href)
  loop do
    ae = ae.show(:foo => 'foo')
    puts "    Summary: #{ae.summary}" unless ae.summary.start_with?("RightScript:")
    return true if ae.summary.start_with?("completed:")
    return false if ae.summary.start_with?("failed:")
    sleep 60
  end
end

def create_volume(server, size_gb)
  instance=server.show(:foo=>'foo').next_instance.show(:view => 'full')
  dc = instance.datacenter.show
  cloud = instance.cloud.show
  puts "Creating #{size_gb}GB volume in datacenter #{dc}"
  v = { 'datacenter_href' => dc.href, 'description' => 'mcbench auto-created',
        'name' => "vol_for_#{instance.name}", 'size' => size_gb }
  volume = cloud.volumes.create(:volume => v).show
  puts "    Volume: #{volume.show.href}"
  volume
end

def attach_launch(server, volume)
  puts "Creating recurring volume attachment"
  instance=server.show(:foo=>'foo').next_instance.show
  va = instance.cloud.show.recurring_volume_attachments.create(:recurring_volume_attachment =>
      {'storage_href'=>volume.href, 'runnable_href'=>server.href, 'device'=>'/dev/xvdd'})
  puts "Launching #{server.next_instance.show.cloud.show.cloud_type} server"
  #puts server.show(:foo=>'foo').inspect
  server.launch
  sleep 1
  while (server=server.show(:foo=>'foo')).state == 'inactive'
    puts "    Waiting for server #{server.name} to get going..."
    sleep 10
  end
  puts "    Server is launching => #{server.name} #{server.href}"
end

def attach_volume(server, volume)
  instance=server.show(:foo=>'foo').current_instance.show
  va = instance.volume_attachments.create(:volume_attachment =>
      {'volume_href'=>volume.href, 'device'=>'/dev/xvdd'})
  puts "Waiting for volume attachment to complete"
  loop do
    va = va.show(:foo=>'foo')
    break if va.state == 'attached'
    sleep 120
  end
  puts "  Attachment completed"
  va
end

def finish(server)
  server = server.show(:foo=>'foo')
  puts "Terminating server #{server.name}"
  volumes = []
  begin
    volumes = server.show.current_instance.show.volume_attachments.index
  rescue Exception => e
  end
  puts "Found #{volumes.size} volumes"
  server.terminate
  while server.show(:foo=>'foo').state != 'inactive'
    puts "    Waiting for server #{server.name} to terminate..."
    sleep 60
  end
  if volumes.size > 0
    puts "Deleting #{volumes.size} volumes"
    volumes.each do |v|
      v = v.show
      if v.device =~ /\/dev/
        v.delete
      end
    end
  end
  puts "Deleting server #{server.name}"
  server.destroy
end

def full_launch(server)
  case server.next_instance.show.cloud.show.cloud_type
  when "sunrise", "google"
    volume = create_volume(server, 200)
    attach_launch(server, volume)
    wait_launched(server)
    server.show(:foo=>'foo')
  when "softlayer", "soft_layer", "cloudstack", "cloud_stack", "rackspace", "azure"
    launch(server)
    wait_launched(server)
    server.show(:foo=>'foo')
  else
    puts "Dunno what to do with cloud #{next_i.cloud.show.cloud_type}"
    raise "Unknown cloud type"
  end
end

def find_clone_server(server_name)
  puts "*** Launching server #{server_name} in deployment #{$deployment_name}"
  servers = $client.servers.index(:filter => ["deployment_href==#{$deployment.href}",
                                              "name==#{server_name}"])
  server = (servers||[]).select{|s| s.name == server_name}
  unless server && server.size > 0
    puts "Can't find server matching #{server_name}"
    raise "No server matching #{server_name}"
  else
    clone(servers[0].show)
  end
end

#
# Special stuff
#

if $deployment_name.nil?
  puts "Cookie has been refreshed, exiting..."
  exit 0
end

#
# Launch an instance, then wait for it to be done and terminate it
#

deployment = $client.deployments.index(:filter => ["name==#{$deployment_name}"])
unless deployment && deployment.size > 0
  puts "Can't find deployment #{$deployment_name}"
  exit 1
end
$deployment = deployment[0].show

# If we just have a deployment name, then enumerate all the server names
if $server_name.nil?
  servers    = $client.servers.index(:filter => ["deployment_href==#{deployment.href}"])
  puts (servers||[]).select{|s| s.name !~ /v\d+$/}.map{|s|s.name}.join(' ')

else
  server = find_clone_server($server_name)
  server = full_launch(server)

  Ripl.start(:binding => binding) if $irb

  run_bench(server, 'fio')
  finish(server)

  puts "Done! #{Time.now}"

end
